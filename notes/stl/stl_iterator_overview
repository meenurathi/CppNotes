
An Iterator 
    - an object that can traverse (iterate over) a container class without the user having to know how the container is implemented. Iterators must be implemented on a per-class basis, because the iterator does need to know how a class is implemented. Thus iterators are always tied to specific container classes.
    - It is best visualized as a pointer to a given element in the container
    -Iterators provide an easy way to step through the elements of a container class without having to understand how the container class is implemented. 
    - When combined with STL’s algorithms and the member functions of the container classes, iterators become even more powerful. 

    - It has a set of overloaded operators to provide a set of well-defined functions:

        1) Operator* 
            -- Dereferencing the iterator returns the element that the iterator is currently pointing at.
        2) Operator++ 
            -- Moves the iterator to the next element in the container. 
            -- Most iterators also provide Operator-- to move to the previous element.
        3) Operator== and Operator!=
             -- Basic comparison operators to determine if two iterators point to the same element. 
             To compare the values that two iterators are pointing at, dereference the iterators first, and then use a comparison operator.
        4) Operator= 
            -- Assign the iterator to a new position (typically the start or end of the container’s elements). 
            To assign the value of the element the iterator is pointing at, dereference the iterator first, then use the assign operator.

    - Each container includes four basic member functions for use with Operator=:

        1) begin() 
            - returns an iterator representing the beginning of the elements in the container.
        2) end()
            - returns an iterator representing the element just past the end of the elements.
        3) cbegin() 
            - returns a const (read-only) iterator representing the beginning of the elements in the container.
        4) cend() 
            - returns a const (read-only) iterator representing the element just past the end of the elements.


    - all containers provide (at least) two types of iterators:
        1) container::iterator 
            - provides a read/write iterator
        2) container::const_iterator 
            - provides a read-only iterator

    - Examples of using iterators.

        1)Iterating through a vector

            #include <iostream>
            #include <vector>
            
            int main()
            {
                std::vector<int> vect;
                for (int count=0; count < 6; ++count)
                    vect.push_back(count);
            
                std::vector<int>::const_iterator it; // declare a read-only iterator
                it = vect.cbegin(); // assign it to the start of the vector
                while (it != vect.cend()) // while it hasn't reach the end
                    {
                    std::cout << *it << " "; // print the value of the element it points to
                    ++it; // and iterate to the next element
                    }
            
                std::cout << '\n';
            }
            This prints the following:

            0 1 2 3 4 5

        2) Iterating through a list

            #include <iostream>
            #include <list>
            
            int main()
            {
            
                std::list<int> li;
                for (int count=0; count < 6; ++count)
                    li.push_back(count);
            
                std::list<int>::const_iterator it; // declare an iterator
                it = li.cbegin(); // assign it to the start of the list
                while (it != li.cend()) // while it hasn't reach the end
                {
                    std::cout << *it << " "; // print the value of the element it points to
                    ++it; // and iterate to the next element
                }
            
                std::cout << '\n';
            }
            This prints:

            0 1 2 3 4 5

        3) Iterating through a set

            #include <iostream>
            #include <set>
            
            int main()
            {
                std::set<int> myset;
                myset.insert(7);
                myset.insert(2);
                myset.insert(-6);
                myset.insert(8);
                myset.insert(1);
                myset.insert(-4);
            
                std::set<int>::const_iterator it; // declare an iterator
                it = myset.cbegin(); // assign it to the start of the set
                while (it != myset.cend()) // while it hasn't reach the end
                {
                    std::cout << *it << " "; // print the value of the element it points to
                    ++it; // and iterate to the next element
                }
            
                std::cout << '\n';
            }
            This program produces the following result:

            -6 -4 1 2 7 8

        4) Iterating through a map

            Maps and multimaps take pairs of elements (defined as a std::pair). 
            We use the make_pair() helper function to easily create pairs.
            std::pair allows access to the elements of the pair via the first and second members.
            In our map, we use first as the key, and second as the value.

            #include <iostream>
            #include <map>
            #include <string>
            
            int main()
            {
                std::map<int, std::string> mymap;
                mymap.insert(std::make_pair(4, "apple"));
                mymap.insert(std::make_pair(2, "orange"));
                mymap.insert(std::make_pair(1, "banana"));
                mymap.insert(std::make_pair(3, "grapes"));
                mymap.insert(std::make_pair(6, "mango"));
                mymap.insert(std::make_pair(5, "peach"));
            
                auto it{ mymap.cbegin() }; // declare a const iterator and assign to start of vector
                while (it != mymap.cend()) // while it hasn't reach the end
                {
                    std::cout << it->first << "=" << it->second << " "; // print the value of the element it points to
                    ++it; // and iterate to the next element
                }
            
                std::cout << '\n';
            }
            This program produces the result:

            1=banana 2=orange 3=grapes 4=apple 5=peach 6=mango


    

